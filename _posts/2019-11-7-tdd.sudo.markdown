---
layout: default
banner: practice
title:  "Test Drive Development"
date:   2019-10-21 16:00:00 +0000
---

# Test Driven Development

> "Legacy code is any code that does not have tests"
> \- Jonathan Allen

<img src="/assets/images/basil-blur-cheese-546945.jpg"
     alt="Picture of Spaghetti, by Maurijn Pach - pexels.com"
     with="80%" />

> "The only thing standing between your code and the spaghetti it desires to be, are your tests"
> \- Alex Mickelson

> "The slowest way to check if your program is working is the debugger"
> \- Heber Allen

> "One of the things I have found really valuble for tests is that it makes your code flexible. [With TDD] you have a suite of tests you can run to check if your program works correctly. You are one click away from knowing if you logic was right"
> \- Diego Vanegas



#### Terminology

* Unit test - A mini-program that checks the functionality of a unit of code.
* Integration test - A program that checks the combined functionality of multiple units of code
* TDD - Acronym for Test Driven Development

* Red, Green, Refactor - The TDD lifecycle
    * Red: You have a failing test, you cannot implement features/functionality unless you have a failing test. You are only allowed to add minimal code untill your tests pass. Code that does not compile is 'Red'.
    * Green: All your tests are passing. At this stage you are not allowed to add functionality to your code. 
    * Refactor: Once your tests pass you should refactor your code. Your tests will tell you if you broke something. You are only allowed to change (refactor) existing code, not implement new code.



#### Common Pitfalls While Testing

* Multiple assertions per test. 
* Large iteration loops
* Implementing more than the minimum amount of code
* Not being a lazy programmer


#### Calculator Project

As is tradition in programming we will be making lots of calculators. I chose the calculator intentionally so we can focus more on the principles of Test Driven Development rather than learing new algorithms or concepts.

C++: implement add and subtract, keep a running total

Java: keep a list of number to add and numbers to subtract, evaluate total in getTotal()

C#: This calculator will have no total variable. Use a dictionary to lookup pre-computed values.

Python: 

#### how to setup tests in each language

##### C++

Requirements:
* g++
* gbd
* c++ vscode extension

Due to its age, C++ has the least support out of the box for unit testing. We will be using [Doctest](https://github.com/onqtam/doctest), an open source framework. 


##### Java

Requirements:
* jdk
* jar files for Junit4 and hamcrest core

We will be using Junit 4 as our testing framework. There is a newer Junit 5 out, but I have used Junit4 in the past so it is what we will be focusing on today. 

For java development I would recomend using intellij for an IDE. We will be using the command line to compile and run our tests, so any editor will work.


##### C#

Requirements:

* dotnet cli


##### Python







